# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ccmslam_msgs/CvKeyPoint.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CvKeyPoint(genpy.Message):
  _md5sum = "90996e3a2f237f647a484f1ea5d89bea"
  _type = "ccmslam_msgs/CvKeyPoint"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 fPoint2f_x
float32 fPoint2f_y
#float32 size
uint8 size
float32 angle
#float32 response
uint8 response
int8 octave
#int8 class_id
"""
  __slots__ = ['fPoint2f_x','fPoint2f_y','size','angle','response','octave']
  _slot_types = ['float32','float32','uint8','float32','uint8','int8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       fPoint2f_x,fPoint2f_y,size,angle,response,octave

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CvKeyPoint, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.fPoint2f_x is None:
        self.fPoint2f_x = 0.
      if self.fPoint2f_y is None:
        self.fPoint2f_y = 0.
      if self.size is None:
        self.size = 0
      if self.angle is None:
        self.angle = 0.
      if self.response is None:
        self.response = 0
      if self.octave is None:
        self.octave = 0
    else:
      self.fPoint2f_x = 0.
      self.fPoint2f_y = 0.
      self.size = 0
      self.angle = 0.
      self.response = 0
      self.octave = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2fBfBb().pack(_x.fPoint2f_x, _x.fPoint2f_y, _x.size, _x.angle, _x.response, _x.octave))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.fPoint2f_x, _x.fPoint2f_y, _x.size, _x.angle, _x.response, _x.octave,) = _get_struct_2fBfBb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2fBfBb().pack(_x.fPoint2f_x, _x.fPoint2f_y, _x.size, _x.angle, _x.response, _x.octave))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.fPoint2f_x, _x.fPoint2f_y, _x.size, _x.angle, _x.response, _x.octave,) = _get_struct_2fBfBb().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fBfBb = None
def _get_struct_2fBfBb():
    global _struct_2fBfBb
    if _struct_2fBfBb is None:
        _struct_2fBfBb = struct.Struct("<2fBfBb")
    return _struct_2fBfBb

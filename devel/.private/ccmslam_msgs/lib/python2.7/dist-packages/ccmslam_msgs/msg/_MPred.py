# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ccmslam_msgs/MPred.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MPred(genpy.Message):
  _md5sum = "21094d2cad6492bf5fe5dbf4f7793049"
  _type = "ccmslam_msgs/MPred"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint32 mnId # unique MP id
uint8 mClientId # client id
uint32 mUniqueId
bool mbAck

#Position in absolute coordinates
     float32[3] mPosPred
     float32[3] mPosPar

     bool mbNormalAndDepthChanged

    bool mbServerBA

#Reference KeyFrame
     uint16 mpPredKFId
     uint8 mpPredKFClientId
     uint16 mpParKFId
     uint8 mpParKFClientId

#Bad flag
     bool mbBad

#Visualization
     bool mbMultiUse
"""
  __slots__ = ['mnId','mClientId','mUniqueId','mbAck','mPosPred','mPosPar','mbNormalAndDepthChanged','mbServerBA','mpPredKFId','mpPredKFClientId','mpParKFId','mpParKFClientId','mbBad','mbMultiUse']
  _slot_types = ['uint32','uint8','uint32','bool','float32[3]','float32[3]','bool','bool','uint16','uint8','uint16','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mnId,mClientId,mUniqueId,mbAck,mPosPred,mPosPar,mbNormalAndDepthChanged,mbServerBA,mpPredKFId,mpPredKFClientId,mpParKFId,mpParKFClientId,mbBad,mbMultiUse

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MPred, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mnId is None:
        self.mnId = 0
      if self.mClientId is None:
        self.mClientId = 0
      if self.mUniqueId is None:
        self.mUniqueId = 0
      if self.mbAck is None:
        self.mbAck = False
      if self.mPosPred is None:
        self.mPosPred = [0.] * 3
      if self.mPosPar is None:
        self.mPosPar = [0.] * 3
      if self.mbNormalAndDepthChanged is None:
        self.mbNormalAndDepthChanged = False
      if self.mbServerBA is None:
        self.mbServerBA = False
      if self.mpPredKFId is None:
        self.mpPredKFId = 0
      if self.mpPredKFClientId is None:
        self.mpPredKFClientId = 0
      if self.mpParKFId is None:
        self.mpParKFId = 0
      if self.mpParKFClientId is None:
        self.mpParKFClientId = 0
      if self.mbBad is None:
        self.mbBad = False
      if self.mbMultiUse is None:
        self.mbMultiUse = False
    else:
      self.mnId = 0
      self.mClientId = 0
      self.mUniqueId = 0
      self.mbAck = False
      self.mPosPred = [0.] * 3
      self.mPosPar = [0.] * 3
      self.mbNormalAndDepthChanged = False
      self.mbServerBA = False
      self.mpPredKFId = 0
      self.mpPredKFClientId = 0
      self.mpParKFId = 0
      self.mpParKFClientId = 0
      self.mbBad = False
      self.mbMultiUse = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_IBIB().pack(_x.mnId, _x.mClientId, _x.mUniqueId, _x.mbAck))
      buff.write(_get_struct_3f().pack(*self.mPosPred))
      buff.write(_get_struct_3f().pack(*self.mPosPar))
      _x = self
      buff.write(_get_struct_2BHBH3B().pack(_x.mbNormalAndDepthChanged, _x.mbServerBA, _x.mpPredKFId, _x.mpPredKFClientId, _x.mpParKFId, _x.mpParKFClientId, _x.mbBad, _x.mbMultiUse))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.mnId, _x.mClientId, _x.mUniqueId, _x.mbAck,) = _get_struct_IBIB().unpack(str[start:end])
      self.mbAck = bool(self.mbAck)
      start = end
      end += 12
      self.mPosPred = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.mPosPar = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 10
      (_x.mbNormalAndDepthChanged, _x.mbServerBA, _x.mpPredKFId, _x.mpPredKFClientId, _x.mpParKFId, _x.mpParKFClientId, _x.mbBad, _x.mbMultiUse,) = _get_struct_2BHBH3B().unpack(str[start:end])
      self.mbNormalAndDepthChanged = bool(self.mbNormalAndDepthChanged)
      self.mbServerBA = bool(self.mbServerBA)
      self.mbBad = bool(self.mbBad)
      self.mbMultiUse = bool(self.mbMultiUse)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_IBIB().pack(_x.mnId, _x.mClientId, _x.mUniqueId, _x.mbAck))
      buff.write(self.mPosPred.tostring())
      buff.write(self.mPosPar.tostring())
      _x = self
      buff.write(_get_struct_2BHBH3B().pack(_x.mbNormalAndDepthChanged, _x.mbServerBA, _x.mpPredKFId, _x.mpPredKFClientId, _x.mpParKFId, _x.mpParKFClientId, _x.mbBad, _x.mbMultiUse))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 10
      (_x.mnId, _x.mClientId, _x.mUniqueId, _x.mbAck,) = _get_struct_IBIB().unpack(str[start:end])
      self.mbAck = bool(self.mbAck)
      start = end
      end += 12
      self.mPosPred = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.mPosPar = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 10
      (_x.mbNormalAndDepthChanged, _x.mbServerBA, _x.mpPredKFId, _x.mpPredKFClientId, _x.mpParKFId, _x.mpParKFClientId, _x.mbBad, _x.mbMultiUse,) = _get_struct_2BHBH3B().unpack(str[start:end])
      self.mbNormalAndDepthChanged = bool(self.mbNormalAndDepthChanged)
      self.mbServerBA = bool(self.mbServerBA)
      self.mbBad = bool(self.mbBad)
      self.mbMultiUse = bool(self.mbMultiUse)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2BHBH3B = None
def _get_struct_2BHBH3B():
    global _struct_2BHBH3B
    if _struct_2BHBH3B is None:
        _struct_2BHBH3B = struct.Struct("<2BHBH3B")
    return _struct_2BHBH3B
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_IBIB = None
def _get_struct_IBIB():
    global _struct_IBIB
    if _struct_IBIB is None:
        _struct_IBIB = struct.Struct("<IBIB")
    return _struct_IBIB

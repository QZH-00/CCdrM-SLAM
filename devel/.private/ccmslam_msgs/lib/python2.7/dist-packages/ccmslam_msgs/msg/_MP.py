# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ccmslam_msgs/MP.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MP(genpy.Message):
  _md5sum = "ee9ee0dc93fb4f2d45a42502f14d89d8"
  _type = "ccmslam_msgs/MP"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool bSentOnce

uint32 mnId # unique MP id
uint8 mClientId # client id
uint32 mUniqueId
int16 mnFirstKFid
uint8 mnFirstKfClientId
bool mbAck

#Position in absolute coordinates
     float32[3] mPosPred
     float32[3] mPosPar
     bool mbPoseChanged

     bool mbServerBA

#Keyframes observing the point and associated index in keyframe
     uint16[] mObservations_KFIDs
     uint8[] mObservations_KFClientIDs
     uint16[] mObservations_n

#Mean viewing direction
     float32[3] mNormalVector
     bool mbNormalAndDepthChanged

#Best descriptor to fast matching
     uint8[32] mDescriptor

#Reference KeyFrame
     uint16 mpPredKFId
     uint8 mpPredKFClientId
     uint16 mpParKFId
     uint8 mpParKFClientId

#Bad flag
     bool mbBad

#Scale invariance distances
     float32 mfMinDistance
     float32 mfMaxDistance

#Visualization
     bool mbMultiUse
"""
  __slots__ = ['bSentOnce','mnId','mClientId','mUniqueId','mnFirstKFid','mnFirstKfClientId','mbAck','mPosPred','mPosPar','mbPoseChanged','mbServerBA','mObservations_KFIDs','mObservations_KFClientIDs','mObservations_n','mNormalVector','mbNormalAndDepthChanged','mDescriptor','mpPredKFId','mpPredKFClientId','mpParKFId','mpParKFClientId','mbBad','mfMinDistance','mfMaxDistance','mbMultiUse']
  _slot_types = ['bool','uint32','uint8','uint32','int16','uint8','bool','float32[3]','float32[3]','bool','bool','uint16[]','uint8[]','uint16[]','float32[3]','bool','uint8[32]','uint16','uint8','uint16','uint8','bool','float32','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bSentOnce,mnId,mClientId,mUniqueId,mnFirstKFid,mnFirstKfClientId,mbAck,mPosPred,mPosPar,mbPoseChanged,mbServerBA,mObservations_KFIDs,mObservations_KFClientIDs,mObservations_n,mNormalVector,mbNormalAndDepthChanged,mDescriptor,mpPredKFId,mpPredKFClientId,mpParKFId,mpParKFClientId,mbBad,mfMinDistance,mfMaxDistance,mbMultiUse

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MP, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.bSentOnce is None:
        self.bSentOnce = False
      if self.mnId is None:
        self.mnId = 0
      if self.mClientId is None:
        self.mClientId = 0
      if self.mUniqueId is None:
        self.mUniqueId = 0
      if self.mnFirstKFid is None:
        self.mnFirstKFid = 0
      if self.mnFirstKfClientId is None:
        self.mnFirstKfClientId = 0
      if self.mbAck is None:
        self.mbAck = False
      if self.mPosPred is None:
        self.mPosPred = [0.] * 3
      if self.mPosPar is None:
        self.mPosPar = [0.] * 3
      if self.mbPoseChanged is None:
        self.mbPoseChanged = False
      if self.mbServerBA is None:
        self.mbServerBA = False
      if self.mObservations_KFIDs is None:
        self.mObservations_KFIDs = []
      if self.mObservations_KFClientIDs is None:
        self.mObservations_KFClientIDs = b''
      if self.mObservations_n is None:
        self.mObservations_n = []
      if self.mNormalVector is None:
        self.mNormalVector = [0.] * 3
      if self.mbNormalAndDepthChanged is None:
        self.mbNormalAndDepthChanged = False
      if self.mDescriptor is None:
        self.mDescriptor = b'\0'*32
      if self.mpPredKFId is None:
        self.mpPredKFId = 0
      if self.mpPredKFClientId is None:
        self.mpPredKFClientId = 0
      if self.mpParKFId is None:
        self.mpParKFId = 0
      if self.mpParKFClientId is None:
        self.mpParKFClientId = 0
      if self.mbBad is None:
        self.mbBad = False
      if self.mfMinDistance is None:
        self.mfMinDistance = 0.
      if self.mfMaxDistance is None:
        self.mfMaxDistance = 0.
      if self.mbMultiUse is None:
        self.mbMultiUse = False
    else:
      self.bSentOnce = False
      self.mnId = 0
      self.mClientId = 0
      self.mUniqueId = 0
      self.mnFirstKFid = 0
      self.mnFirstKfClientId = 0
      self.mbAck = False
      self.mPosPred = [0.] * 3
      self.mPosPar = [0.] * 3
      self.mbPoseChanged = False
      self.mbServerBA = False
      self.mObservations_KFIDs = []
      self.mObservations_KFClientIDs = b''
      self.mObservations_n = []
      self.mNormalVector = [0.] * 3
      self.mbNormalAndDepthChanged = False
      self.mDescriptor = b'\0'*32
      self.mpPredKFId = 0
      self.mpPredKFClientId = 0
      self.mpParKFId = 0
      self.mpParKFClientId = 0
      self.mbBad = False
      self.mfMinDistance = 0.
      self.mfMaxDistance = 0.
      self.mbMultiUse = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_BIBIh2B().pack(_x.bSentOnce, _x.mnId, _x.mClientId, _x.mUniqueId, _x.mnFirstKFid, _x.mnFirstKfClientId, _x.mbAck))
      buff.write(_get_struct_3f().pack(*self.mPosPred))
      buff.write(_get_struct_3f().pack(*self.mPosPar))
      _x = self
      buff.write(_get_struct_2B().pack(_x.mbPoseChanged, _x.mbServerBA))
      length = len(self.mObservations_KFIDs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.mObservations_KFIDs))
      _x = self.mObservations_KFClientIDs
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.mObservations_n)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(struct.Struct(pattern).pack(*self.mObservations_n))
      buff.write(_get_struct_3f().pack(*self.mNormalVector))
      _x = self.mbNormalAndDepthChanged
      buff.write(_get_struct_B().pack(_x))
      _x = self.mDescriptor
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_32B().pack(*_x))
      else:
        buff.write(_get_struct_32s().pack(_x))
      _x = self
      buff.write(_get_struct_HBH2B2fB().pack(_x.mpPredKFId, _x.mpPredKFClientId, _x.mpParKFId, _x.mpParKFClientId, _x.mbBad, _x.mfMinDistance, _x.mfMaxDistance, _x.mbMultiUse))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.bSentOnce, _x.mnId, _x.mClientId, _x.mUniqueId, _x.mnFirstKFid, _x.mnFirstKfClientId, _x.mbAck,) = _get_struct_BIBIh2B().unpack(str[start:end])
      self.bSentOnce = bool(self.bSentOnce)
      self.mbAck = bool(self.mbAck)
      start = end
      end += 12
      self.mPosPred = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 12
      self.mPosPar = _get_struct_3f().unpack(str[start:end])
      _x = self
      start = end
      end += 2
      (_x.mbPoseChanged, _x.mbServerBA,) = _get_struct_2B().unpack(str[start:end])
      self.mbPoseChanged = bool(self.mbPoseChanged)
      self.mbServerBA = bool(self.mbServerBA)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.mObservations_KFIDs = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.mObservations_KFClientIDs = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.mObservations_n = s.unpack(str[start:end])
      start = end
      end += 12
      self.mNormalVector = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 1
      (self.mbNormalAndDepthChanged,) = _get_struct_B().unpack(str[start:end])
      self.mbNormalAndDepthChanged = bool(self.mbNormalAndDepthChanged)
      start = end
      end += 32
      self.mDescriptor = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.mpPredKFId, _x.mpPredKFClientId, _x.mpParKFId, _x.mpParKFClientId, _x.mbBad, _x.mfMinDistance, _x.mfMaxDistance, _x.mbMultiUse,) = _get_struct_HBH2B2fB().unpack(str[start:end])
      self.mbBad = bool(self.mbBad)
      self.mbMultiUse = bool(self.mbMultiUse)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_BIBIh2B().pack(_x.bSentOnce, _x.mnId, _x.mClientId, _x.mUniqueId, _x.mnFirstKFid, _x.mnFirstKfClientId, _x.mbAck))
      buff.write(self.mPosPred.tostring())
      buff.write(self.mPosPar.tostring())
      _x = self
      buff.write(_get_struct_2B().pack(_x.mbPoseChanged, _x.mbServerBA))
      length = len(self.mObservations_KFIDs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.mObservations_KFIDs.tostring())
      _x = self.mObservations_KFClientIDs
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.mObservations_n)
      buff.write(_struct_I.pack(length))
      pattern = '<%sH'%length
      buff.write(self.mObservations_n.tostring())
      buff.write(self.mNormalVector.tostring())
      _x = self.mbNormalAndDepthChanged
      buff.write(_get_struct_B().pack(_x))
      _x = self.mDescriptor
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_32B().pack(*_x))
      else:
        buff.write(_get_struct_32s().pack(_x))
      _x = self
      buff.write(_get_struct_HBH2B2fB().pack(_x.mpPredKFId, _x.mpPredKFClientId, _x.mpParKFId, _x.mpParKFClientId, _x.mbBad, _x.mfMinDistance, _x.mfMaxDistance, _x.mbMultiUse))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.bSentOnce, _x.mnId, _x.mClientId, _x.mUniqueId, _x.mnFirstKFid, _x.mnFirstKfClientId, _x.mbAck,) = _get_struct_BIBIh2B().unpack(str[start:end])
      self.bSentOnce = bool(self.bSentOnce)
      self.mbAck = bool(self.mbAck)
      start = end
      end += 12
      self.mPosPred = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 12
      self.mPosPar = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      _x = self
      start = end
      end += 2
      (_x.mbPoseChanged, _x.mbServerBA,) = _get_struct_2B().unpack(str[start:end])
      self.mbPoseChanged = bool(self.mbPoseChanged)
      self.mbServerBA = bool(self.mbServerBA)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.mObservations_KFIDs = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.mObservations_KFClientIDs = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sH'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.mObservations_n = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=length)
      start = end
      end += 12
      self.mNormalVector = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=3)
      start = end
      end += 1
      (self.mbNormalAndDepthChanged,) = _get_struct_B().unpack(str[start:end])
      self.mbNormalAndDepthChanged = bool(self.mbNormalAndDepthChanged)
      start = end
      end += 32
      self.mDescriptor = str[start:end]
      _x = self
      start = end
      end += 16
      (_x.mpPredKFId, _x.mpPredKFClientId, _x.mpParKFId, _x.mpParKFClientId, _x.mbBad, _x.mfMinDistance, _x.mfMaxDistance, _x.mbMultiUse,) = _get_struct_HBH2B2fB().unpack(str[start:end])
      self.mbBad = bool(self.mbBad)
      self.mbMultiUse = bool(self.mbMultiUse)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_32B = None
def _get_struct_32B():
    global _struct_32B
    if _struct_32B is None:
        _struct_32B = struct.Struct("<32B")
    return _struct_32B
_struct_32s = None
def _get_struct_32s():
    global _struct_32s
    if _struct_32s is None:
        _struct_32s = struct.Struct("<32s")
    return _struct_32s
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_BIBIh2B = None
def _get_struct_BIBIh2B():
    global _struct_BIBIh2B
    if _struct_BIBIh2B is None:
        _struct_BIBIh2B = struct.Struct("<BIBIh2B")
    return _struct_BIBIh2B
_struct_HBH2B2fB = None
def _get_struct_HBH2B2fB():
    global _struct_HBH2B2fB
    if _struct_HBH2B2fB is None:
        _struct_HBH2B2fB = struct.Struct("<HBH2B2fB")
    return _struct_HBH2B2fB

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ccmslam_msgs/KFred.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class KFred(genpy.Message):
  _md5sum = "9a8aed18ba662f03ebe82d1ab206ea57"
  _type = "ccmslam_msgs/KFred"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 mnId # unique KF id
uint8 mClientId # client id
uint32 mUniqueId
bool mbAck

#Poses
    float32[16] mTcpred
    float32[16] mTcpar

    uint16 mpPred_KfId
    uint8 mpPred_KfClientId

    uint16 mpPar_KfId
    uint8 mpPar_KfClientId

    bool mbServerBA

#Bad flags
    bool mbBad
"""
  __slots__ = ['mnId','mClientId','mUniqueId','mbAck','mTcpred','mTcpar','mpPred_KfId','mpPred_KfClientId','mpPar_KfId','mpPar_KfClientId','mbServerBA','mbBad']
  _slot_types = ['uint16','uint8','uint32','bool','float32[16]','float32[16]','uint16','uint8','uint16','uint8','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       mnId,mClientId,mUniqueId,mbAck,mTcpred,mTcpar,mpPred_KfId,mpPred_KfClientId,mpPar_KfId,mpPar_KfClientId,mbServerBA,mbBad

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(KFred, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.mnId is None:
        self.mnId = 0
      if self.mClientId is None:
        self.mClientId = 0
      if self.mUniqueId is None:
        self.mUniqueId = 0
      if self.mbAck is None:
        self.mbAck = False
      if self.mTcpred is None:
        self.mTcpred = [0.] * 16
      if self.mTcpar is None:
        self.mTcpar = [0.] * 16
      if self.mpPred_KfId is None:
        self.mpPred_KfId = 0
      if self.mpPred_KfClientId is None:
        self.mpPred_KfClientId = 0
      if self.mpPar_KfId is None:
        self.mpPar_KfId = 0
      if self.mpPar_KfClientId is None:
        self.mpPar_KfClientId = 0
      if self.mbServerBA is None:
        self.mbServerBA = False
      if self.mbBad is None:
        self.mbBad = False
    else:
      self.mnId = 0
      self.mClientId = 0
      self.mUniqueId = 0
      self.mbAck = False
      self.mTcpred = [0.] * 16
      self.mTcpar = [0.] * 16
      self.mpPred_KfId = 0
      self.mpPred_KfClientId = 0
      self.mpPar_KfId = 0
      self.mpPar_KfClientId = 0
      self.mbServerBA = False
      self.mbBad = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_HBIB().pack(_x.mnId, _x.mClientId, _x.mUniqueId, _x.mbAck))
      buff.write(_get_struct_16f().pack(*self.mTcpred))
      buff.write(_get_struct_16f().pack(*self.mTcpar))
      _x = self
      buff.write(_get_struct_HBH3B().pack(_x.mpPred_KfId, _x.mpPred_KfClientId, _x.mpPar_KfId, _x.mpPar_KfClientId, _x.mbServerBA, _x.mbBad))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.mnId, _x.mClientId, _x.mUniqueId, _x.mbAck,) = _get_struct_HBIB().unpack(str[start:end])
      self.mbAck = bool(self.mbAck)
      start = end
      end += 64
      self.mTcpred = _get_struct_16f().unpack(str[start:end])
      start = end
      end += 64
      self.mTcpar = _get_struct_16f().unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.mpPred_KfId, _x.mpPred_KfClientId, _x.mpPar_KfId, _x.mpPar_KfClientId, _x.mbServerBA, _x.mbBad,) = _get_struct_HBH3B().unpack(str[start:end])
      self.mbServerBA = bool(self.mbServerBA)
      self.mbBad = bool(self.mbBad)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_HBIB().pack(_x.mnId, _x.mClientId, _x.mUniqueId, _x.mbAck))
      buff.write(self.mTcpred.tostring())
      buff.write(self.mTcpar.tostring())
      _x = self
      buff.write(_get_struct_HBH3B().pack(_x.mpPred_KfId, _x.mpPred_KfClientId, _x.mpPar_KfId, _x.mpPar_KfClientId, _x.mbServerBA, _x.mbBad))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.mnId, _x.mClientId, _x.mUniqueId, _x.mbAck,) = _get_struct_HBIB().unpack(str[start:end])
      self.mbAck = bool(self.mbAck)
      start = end
      end += 64
      self.mTcpred = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=16)
      start = end
      end += 64
      self.mTcpar = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=16)
      _x = self
      start = end
      end += 8
      (_x.mpPred_KfId, _x.mpPred_KfClientId, _x.mpPar_KfId, _x.mpPar_KfClientId, _x.mbServerBA, _x.mbBad,) = _get_struct_HBH3B().unpack(str[start:end])
      self.mbServerBA = bool(self.mbServerBA)
      self.mbBad = bool(self.mbBad)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_16f = None
def _get_struct_16f():
    global _struct_16f
    if _struct_16f is None:
        _struct_16f = struct.Struct("<16f")
    return _struct_16f
_struct_HBH3B = None
def _get_struct_HBH3B():
    global _struct_HBH3B
    if _struct_HBH3B is None:
        _struct_HBH3B = struct.Struct("<HBH3B")
    return _struct_HBH3B
_struct_HBIB = None
def _get_struct_HBIB():
    global _struct_HBIB
    if _struct_HBIB is None:
        _struct_HBIB = struct.Struct("<HBIB")
    return _struct_HBIB
